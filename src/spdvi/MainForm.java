/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package spdvi;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import java.awt.event.MouseListener;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JList;
/**
 *
 * @author lawde
 */
public class MainForm extends javax.swing.JFrame {
    private static final java.lang.reflect.Type LIST_OF_OBRA_TYPE = new TypeToken<List<Obra>>() {}.getType();
    private static ArrayList<Obra> obras;
    private JList<Obra> lstObras;
    String obraFolder = System.getProperty("user.home") + "\\AppData\\Local\\OpusList\\data\\obres.json";
    String imageFolder = System.getProperty("user.home") + "\\AppData\\Local\\OpusList\\Images";
    String noObra = "src\\spdvi\\images\\noObra.jpg";
    final File directory = new File(imageFolder);
    //array per imatges que no s'han de borrar
    private ArrayList<String> keepImages = new ArrayList<String>();
    boolean dataChanged = false;
    ConfirmSave confirm;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        confirm = new ConfirmSave(this, true);
        lstObras = new JList<Obra>(); 
        scrObras.setViewportView(lstObras);
        lstObras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lstObrasMouseClicked(evt);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrObras = new javax.swing.JScrollPane();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mniSave = new javax.swing.JMenuItem();
        mniLoad = new javax.swing.JMenuItem();
        mniExit = new javax.swing.JMenuItem();
        mnuCrud = new javax.swing.JMenu();
        mniInsert = new javax.swing.JMenuItem();
        mniUpdate = new javax.swing.JMenuItem();
        mniDelete = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        scrObras.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scrObrasMouseClicked(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnLoad.setText("Load");
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        mnuFile.setText("File");

        mniSave.setText("Save");
        mniSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mniSave);

        mniLoad.setText("Load");
        mniLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniLoadActionPerformed(evt);
            }
        });
        mnuFile.add(mniLoad);

        mniExit.setText("mniExit");
        mniExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniExitActionPerformed(evt);
            }
        });
        mnuFile.add(mniExit);

        jMenuBar1.add(mnuFile);

        mnuCrud.setText("CRUD");

        mniInsert.setText("Insert new opus");
        mniInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniInsertActionPerformed(evt);
            }
        });
        mnuCrud.add(mniInsert);

        mniUpdate.setText("Update opus");
        mniUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniUpdateActionPerformed(evt);
            }
        });
        mnuCrud.add(mniUpdate);

        mniDelete.setText("Delete Opus");
        mniDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mniDeleteActionPerformed(evt);
            }
        });
        mnuCrud.add(mniDelete);

        jMenuBar1.add(mnuCrud);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrObras, javax.swing.GroupLayout.DEFAULT_SIZE, 610, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLoad)
                .addGap(30, 30, 30))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(118, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(scrObras, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        loadOpus();
    }//GEN-LAST:event_formWindowOpened

    private void mniInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniInsertActionPerformed
        InsertDialog insert = new InsertDialog(this, true);
        insert.setVisible(true);
        
        if (insert.isInsert()){
            //try-catch del fileChooser per a que si es null, pasarli al file, el file de la imatge per defecte, noObra
            try{
                insert.getFileChooser().getSelectedFile().getAbsolutePath();
            }catch(NullPointerException npe){
                File noObraFile = new File(noObra);
                insert.getFileChooser().setSelectedFile(noObraFile);
            }
            //cream una nova obra amb els elements del Dialog insert
            Obra obra = new Obra(
                    insert.getTxtRegistre().getText(),
                    insert.getTxtTitol().getText(),
                    insert.getTxtAny().getText(),
                    insert.getTxtFormat().getText(),
                    insert.getTxtAutor().getText(),
                    insert.getFileChooser().getSelectedFile().getName());
            obra.setImagePath(insert.getFileChooser().getSelectedFile().getParent());
            obras.add(obra);
            dataChanged = true;
            updateOpusList();
        }
    }//GEN-LAST:event_mniInsertActionPerformed

    private void mniUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniUpdateActionPerformed
        UpdateDialog update = new UpdateDialog(this, true);
        update.setVisible(true);
        
        if(update.isUpdate()){
            for(Obra o: obras){
                //si el registre d'una obra coincideix amb el registre escrit al dialog update
                //canvia les dades d'aquesta obra per les escrites en el dialog
                if(o.getRegistre().equals(update.getTxtRegistre().getText())){
                    o.setRegistre(update.getTxtRegistre().getText());
                    o.setTitol(update.getTxtTitol().getText());
                    o.setAny(update.getTxtAny().getText());
                    o.setFormat(update.getTxtFormat().getText());
                    o.setAutor(update.getTxtAutor().getText());
                    o.setImatge(update.getFileChooser().getSelectedFile().getName());
                    o.setImagePath(update.getFileChooser().getSelectedFile().getParent());
                }
            }
            dataChanged = true;
            updateOpusList();
        }
    }//GEN-LAST:event_mniUpdateActionPerformed

    private void mniDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniDeleteActionPerformed
        DeleteDialog delete = new DeleteDialog(this, true);
        delete.setVisible(true);
        if(delete.isDelete()){
            //deletedObras.add((Obra) delete.getCmbObras().getSelectedItem());
            obras.remove(delete.getCmbObras().getSelectedItem());
            dataChanged = true;
            updateOpusList();
        }
    }//GEN-LAST:event_mniDeleteActionPerformed

    private void scrObrasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scrObrasMouseClicked
    }//GEN-LAST:event_scrObrasMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        confirm.setVisible(true);
        
        if (confirm.isConfirm()){
            
            try {
                //guarda les imatges al directory
                for (Obra o: obras){
                    BufferedImage bufferedImage = ImageIO.read(new File(o.getImagePath() + "\\" + o.getImatge()));
                    o.setImatge(o.getRegistre() + ".jpg");
                    String outputImageAbsolutePath = imageFolder + "\\" + o.getImatge();
                    File outputImage = new File(outputImageAbsolutePath);
                    ImageIO.write(bufferedImage, "jpg", outputImage);
                }
                //escriu les dades al Gson
                Gson gson = new GsonBuilder().create();
                Writer writer = new FileWriter(obraFolder);
                gson.toJson(obras, writer);
                writer.flush();
                writer.close();
                //cerca dins el diredctory de les imatges, i dins les obres, si una imatge 
                //esta a una obra existent es guarda al array keepImages
                for (final File fileEntry : directory.listFiles()) {
                    for (Obra o : obras){
                        if (fileEntry.getName().equals(o.getImatge())) {
                            keepImages.add(fileEntry.getName());
                        }
                    }
                }
                //borra les imatges que no estan guardades dins l'array keepImages,
                //per tant borra les imatges que ja no formen part de la llista
                for (final File fileEntry : directory.listFiles()) {
                    if(!keepImages.contains(fileEntry.getName())){
                        Path imagePath = Paths.get(fileEntry.getAbsolutePath());
                        Files.delete(imagePath);
                    }
                }
                dataChanged = false;
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if(dataChanged){
            confirm.getLblText().setText("You are about to leave without saving");
            btnSave.doClick();
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        loadOpus();
    }//GEN-LAST:event_btnLoadActionPerformed

    private void mniLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniLoadActionPerformed
        loadOpus();
    }//GEN-LAST:event_mniLoadActionPerformed

    private void mniSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniSaveActionPerformed
        btnSave.doClick();
    }//GEN-LAST:event_mniSaveActionPerformed

    private void mniExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mniExitActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_mniExitActionPerformed

    private void lstObrasMouseClicked(java.awt.event.MouseEvent evt) {                                          
        if (evt.getClickCount() == 2) {
            Obra selectedObra = lstObras.getSelectedValue();
            UpdateDialog update = new UpdateDialog(this, true);
            update.getTxtRegistre().setText(selectedObra.getRegistre());
            update.setVisible(true);
            if(update.isUpdate()){
                for(Obra o: obras){
                    if(o.getRegistre().equals(update.getTxtRegistre().getText())){
                        o.setRegistre(update.getTxtRegistre().getText());
                        o.setTitol(update.getTxtTitol().getText());
                        o.setAny(update.getTxtAny().getText());
                        o.setFormat(update.getTxtFormat().getText());
                        o.setAutor(update.getTxtAutor().getText());
                        o.setImatge(update.getFileChooser().getSelectedFile().getName());
                        o.setImagePath(update.getFileChooser().getSelectedFile().getParent());
                    }
                }
                dataChanged = true;
                updateOpusList();
            }
        } 
    }   
    
    private void updateOpusList(){
        try{
            DefaultListModel<Obra> opusListModel = new DefaultListModel<Obra>();
            for (Obra o: obras) {
                 opusListModel.addElement(o);
            }
            lstObras.setModel(opusListModel);
        }catch(Exception e){
        }
    }

    private void loadOpus(){
        Gson gson = new Gson();
        try {
            JsonReader reader = new JsonReader(new FileReader(System.getProperty("user.home") + "\\AppData\\Local\\OpusList\\data\\obres.json"));
            obras = gson.fromJson(reader, LIST_OF_OBRA_TYPE);
            for (Obra o : obras){
                o.setImagePath(imageFolder);
            } 
            dataChanged = false;
            updateOpusList();            
        }
        catch (FileNotFoundException fnfe) {
            fnfe.printStackTrace();
        }
    }
    
    public ArrayList<Obra> getObras() {
        return obras;
    }

    public void setObras(ArrayList<Obra> obras) {
        this.obras = obras;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSave;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem mniDelete;
    private javax.swing.JMenuItem mniExit;
    private javax.swing.JMenuItem mniInsert;
    private javax.swing.JMenuItem mniLoad;
    private javax.swing.JMenuItem mniSave;
    private javax.swing.JMenuItem mniUpdate;
    private javax.swing.JMenu mnuCrud;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JScrollPane scrObras;
    // End of variables declaration//GEN-END:variables
}
